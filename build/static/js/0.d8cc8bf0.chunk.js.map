{"version":3,"sources":["hooks/useTickets.ts","hooks/useTokenBalance.ts","hooks/useGetLotteryHasDrawn.ts","utils/lotteryUtils.ts","hooks/useAllowance.ts","hooks/useBuyLottery.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx"],"names":["useTotalRewards","useState","BigNumber","rewards","setRewards","lotteryContract","useLottery","fastRefresh","useRefresh","useEffect","a","getTotalRewards","res","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","useWeb3React","ticketsContract","useLotteryTicket","useCallback","getTotalClaim","claim","useWinningNumbers","winngNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","setTickets","getTickets","useTokenBalance","tokenAddress","balance","setBalance","web3","useWeb3","contract","getBep20Contract","methods","balanceOf","call","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","getLotteryStatus","state","fetchLotteryStatus","multiCall","abi","calls","getWeb3NoAccount","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","length","i","newCalls","slice","calldata","map","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","times","pow","toString","send","from","on","tx","transactionHash","console","error","customLotteryNum","issueIndex","getTicketsAmount","calls1","Array","apply","options","address","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","eq","push","calls3","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","finanltokenIds","r","drawed","calls4","reduce","p","c","sum","getMax","maxNumber","getLotteryIssueIndex","matchNumber","historyAmount","amount","LOTTERY_TICKET_PRICE","parseInt","historyNumbers","winningNumbers","useLotteryAllowance","allowance","setAllowance","cakeContract","useCake","getLotteryAddress","fetchAllowance","useIfoAllowance","tokenContract","spenderAddress","dependency","fetch","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","txHash","useMultiBuyLottery","onMultiBuy","useMaxNumber","max","setMax","fetchMax","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","TicketsList","styled","div","props","theme","colors","primary","WarningModal","onDismiss","TranslateString","useI18n","title","width","onClick","StyledTokenInput","StyledSpacer","spacing","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onChange","onSelectMax","value","alignItems","placeholder","size","toLocaleString","Tips","BuyTicketModal","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","handleBuy","Math","floor","random","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","e","currentTarget","num","Announce","Final","ModalActions","variant","disabled"],"mappings":"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","file":"static/js/0.d8cc8bf0.chunk.js","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport useRefresh from './useRefresh'\r\nimport {\r\n  getTotalRewards,\r\n  getTotalClaim,\r\n  getMatchingRewardLength,\r\n  getWinningNumbers,\r\n  getTickets,\r\n} from '../utils/lotteryUtils'\r\n\r\nconst useTickets = (lotteryNumber = null) => {\r\n  const [tickets, setTickets] = useState([])\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\r\n      setTickets(res)\r\n    }\r\n\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\r\n\r\n  return tickets\r\n}\r\n\r\nexport const useTotalRewards = () => {\r\n  const [rewards, setRewards] = useState(new BigNumber(0))\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTotalRewards(lotteryContract)\r\n      setRewards(new BigNumber(res))\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, fastRefresh])\r\n\r\n  return rewards\r\n}\r\n\r\nexport const useTotalClaim = () => {\r\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\r\n  const [claimLoading, setClaimLoading] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setClaimLoading(true)\r\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\r\n    setClaimAmount(claim)\r\n    setClaimLoading(false)\r\n  }, [account, lotteryContract, ticketsContract])\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\r\n\r\n  return { claimLoading, claimAmount }\r\n}\r\n\r\nexport const useWinningNumbers = () => {\r\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const rewards = await getWinningNumbers(lotteryContract)\r\n      setWinningNumbers(rewards)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\r\n\r\n  return winngNumbers\r\n}\r\n\r\nexport const useMatchingRewardLength = (numbers) => {\r\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\r\n      setMatchingNumbers(matchedNumbaers)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, numbers, fastRefresh])\r\n\r\n  return matchingNumbers\r\n}\r\n\r\nexport default useTickets\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLottery } from 'hooks/useContract'\r\nimport { getLotteryStatus } from 'utils/lotteryUtils'\r\n\r\n/**\r\n * Returns whether or not the current lottery has drawn numbers\r\n *\r\n * @return {Boolean}\r\n */\r\nconst useGetLotteryHasDrawn = () => {\r\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract) {\r\n      const fetchLotteryStatus = async () => {\r\n        const state = await getLotteryStatus(lotteryContract)\r\n        setLotteryHasDrawn(state)\r\n      }\r\n\r\n      fetchLotteryStatus()\r\n    }\r\n  }, [account, lotteryContract])\r\n\r\n  return lotteryHasDrawn\r\n}\r\n\r\nexport default useGetLotteryHasDrawn\r\n","/* eslint-disable no-await-in-loop */\r\nimport BigNumber from 'bignumber.js'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport ticketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport { LOTTERY_TICKET_PRICE } from 'config'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { getMulticallAddress } from './addressHelpers'\r\n\r\nexport const multiCall = async (abi, calls) => {\r\n  const web3 = getWeb3NoAccount()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  let res = []\r\n  if (calls.length > 100) {\r\n    let i = 0\r\n    while (i < calls.length / 100) {\r\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\r\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n      const { returnData } = await multi.methods.aggregate(calldata).call()\r\n      i++\r\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\r\n    }\r\n  } else {\r\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call()\r\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\r\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n  const ticketIssues = await multiCall(ticketAbi, calls2)\r\n\r\n  const finalTokenids = []\r\n  ticketIssues.forEach(async (ticketIssue, i) => {\r\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\r\n      finalTokenids.push(tokenIds[i])\r\n    }\r\n  })\r\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\r\n  const tickets = await multiCall(ticketAbi, calls3)\r\n\r\n  await getLotteryStatus(lotteryContract)\r\n  return tickets\r\n}\r\n\r\nexport const getTicketsAmount = async (ticketsContract, account) => {\r\n  return ticketsContract.methods.balanceOf(account).call()\r\n}\r\n\r\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\r\n  await lotteryContract.methods.issueIndex().call()\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n  const claimedStatus = await multiCall(ticketAbi, calls2)\r\n\r\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\r\n\r\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n  const rewards = await multiCall(lotteryAbi, calls3)\r\n\r\n  let finanltokenIds = []\r\n  rewards.forEach((r, i) => {\r\n    if (r > 0) {\r\n      finanltokenIds.push(unClaimedIds[i])\r\n    }\r\n  })\r\n\r\n  if (finanltokenIds.length > 200) {\r\n    finanltokenIds = finanltokenIds.slice(0, 200)\r\n  }\r\n\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiClaim(finanltokenIds)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\r\n  try {\r\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n    const length = await getTicketsAmount(ticketsContract, account)\r\n    // eslint-disable-next-line prefer-spread\r\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n      ticketsContract.options.address,\r\n      'tokenOfOwnerByIndex',\r\n      [account, i],\r\n    ])\r\n    const res = await multiCall(ticketAbi, calls1)\r\n    const tokenIds = res.map((id) => id.toString())\r\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n    const ticketIssues = await multiCall(ticketAbi, calls2)\r\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n    const claimedStatus = await multiCall(ticketAbi, calls3)\r\n\r\n    const drawed = await getLotteryStatus(lotteryContract)\r\n\r\n    const finalTokenids = []\r\n    ticketIssues.forEach(async (ticketIssue, i) => {\r\n      // eslint-disable-next-line no-empty\r\n      if (!drawed && ticketIssue.toString() === issueIndex) {\r\n      } else if (!claimedStatus[i][0]) {\r\n        finalTokenids.push(tokenIds[i])\r\n      }\r\n    })\r\n\r\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n\r\n    const rewards = await multiCall(lotteryAbi, calls4)\r\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), new BigNumber(0))\r\n\r\n    return claim\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return new BigNumber(0)\r\n}\r\n\r\nexport const getTotalRewards = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\r\n}\r\n\r\nexport const getMax = async (lotteryContract) => {\r\n  return lotteryContract.methods.maxNumber().call()\r\n}\r\n\r\nexport const getLotteryIssueIndex = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return issueIndex\r\n}\r\n\r\nexport const getLotteryStatus = async (lotteryContract) => {\r\n  return lotteryContract.methods.drawed().call()\r\n}\r\n\r\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\r\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n  if (!drawed) {\r\n    issueIndex -= 1\r\n  }\r\n  try {\r\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\r\n    return amount / 1e18 / LOTTERY_TICKET_PRICE\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getWinningNumbers = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const numbers = []\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n\r\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\r\n    return [0, 0, 0, 0]\r\n  }\r\n  if (!drawed) {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\r\n    }\r\n  }\r\n  return numbers\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { getLotteryAddress } from 'utils/addressHelpers'\r\nimport { useCake } from './useContract'\r\nimport useRefresh from './useRefresh'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllowance()\r\n    }\r\n  }, [account, cakeContract, fastRefresh])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\r\n  const { account } = useWeb3React()\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\r\n\r\nexport const useMultiClaimLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n  const lotteryTicketContract = useLotteryTicket()\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\r\n      return txHash\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lotteryContract, lotteryTicketContract])\r\n\r\n  return { onMultiClaim: handleClaim }\r\n}\r\n\r\nexport const useMultiBuyLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleBuy = useCallback(\r\n    async (amount: string, numbers: Array<any>) => {\r\n      try {\r\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\r\n        return txHash\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    },\r\n    [account, lotteryContract],\r\n  )\r\n\r\n  return { onMultiBuy: handleBuy }\r\n}\r\n\r\nexport const useMaxNumber = () => {\r\n  const [max, setMax] = useState(5)\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchMax = useCallback(async () => {\r\n    const maxNumber = await getMax(lotteryContract)\r\n    setMax(maxNumber)\r\n  }, [lotteryContract])\r\n\r\n  useEffect(() => {\r\n    if (lotteryContract) {\r\n      fetchMax()\r\n    }\r\n  }, [lotteryContract, fetchMax])\r\n\r\n  return max\r\n}\r\n","import { useCallback, useState } from 'react'\r\nimport { useLotteryApprove } from './useApprove'\r\n\r\nexport const useApproval = (onPresentApprove: () => void) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { onApprove } = useLotteryApprove()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const txHash = await onApprove()\r\n      // user rejected tx or didn't go thru\r\n      if (!txHash) {\r\n        setRequestedApproval(false)\r\n      }\r\n      onPresentApprove()\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, onPresentApprove])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport default useApproval\r\n","import React from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport styled from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\r\n      <TicketsList>\r\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\r\n        <br />\r\n        {TranslateString(470, 'Your CAKE will not be returned to you after you spend it to buy tickets.')}\r\n        <br />\r\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\r\n        <br />\r\n        {TranslateString(\r\n          474,\r\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\r\n        )}\r\n      </TicketsList>\r\n      <ModalActions>\r\n        <Button width=\"100%\" onClick={onDismiss}>\r\n          {TranslateString(476, 'I understand')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst TicketsList = styled.div`\r\n  text-align: left;\r\n  overflow-y: auto;\r\n  max-height: 400px;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nexport default WarningModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  availableSymbol: string\r\n  value: string\r\n  onSelectMax?: () => void\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTokenInput>\r\n      <Flex alignItems=\"center\">\r\n        <Input onChange={onChange} placeholder=\"0\" value={value} />\r\n        <StyledTokenAdornmentWrapper>\r\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n          <StyledSpacer />\r\n          <div>\r\n            <Button size=\"sm\" onClick={onSelectMax}>\r\n              {TranslateString(452, 'Max')}\r\n            </Button>\r\n          </div>\r\n        </StyledTokenAdornmentWrapper>\r\n      </Flex>\r\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TicketInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport TicketInput from 'components/TicketInput'\r\nimport ModalActions from 'components/ModalActions'\r\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\r\n\r\ninterface BuyTicketModalProps {\r\n  max: BigNumber\r\n  onConfirm?: (amount: string, numbers: Array<number>) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\r\n  const [val, setVal] = useState('1')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [, setRequestedBuy] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const maxTickets = useMemo(() => {\r\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\r\n  }, [max])\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\r\n\r\n  const { onMultiBuy } = useMultiBuyLottery()\r\n  const maxNumber = useMaxNumber()\r\n  const handleBuy = useCallback(async () => {\r\n    try {\r\n      setRequestedBuy(true)\r\n      const length = parseInt(val)\r\n      // @ts-ignore\r\n      // eslint-disable-next-line prefer-spread\r\n      const numbers = Array.apply(null, { length }).map(() => [\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n      ])\r\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedBuy(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\r\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\r\n    } else {\r\n      setVal(maxTickets.toString())\r\n    }\r\n  }, [maxTickets])\r\n\r\n  const cakeCosts = (amount: string): number => {\r\n    return +amount * LOTTERY_TICKET_PRICE\r\n  }\r\n  return (\r\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\r\n      <TicketInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol=\"TICKET\"\r\n        availableSymbol=\"CAKE\"\r\n      />\r\n      <div>\r\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} CAKE`, { num: LOTTERY_TICKET_PRICE })}</Tips>\r\n      </div>\r\n      <div>\r\n        <Announce>\r\n          {TranslateString(\r\n            478,\r\n            'Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.',\r\n          )}\r\n        </Announce>\r\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} CAKE`)}</Final>\r\n      </div>\r\n      <ModalActions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          id=\"lottery-buy-complete\"\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx ||\r\n            parseInt(val) > Number(maxTickets) ||\r\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\r\n            parseInt(val) < 1\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await handleBuy()\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BuyTicketModal\r\n\r\nconst Tips = styled.div`\r\n  margin-left: 0.4em;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nconst Final = styled.div`\r\n  margin-top: 1em;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\nconst Announce = styled.div`\r\n  margin-top: 1em;\r\n  margin-left: 0.4em;\r\n  color: #ed4b9e;\r\n`\r\n"],"sourceRoot":""}